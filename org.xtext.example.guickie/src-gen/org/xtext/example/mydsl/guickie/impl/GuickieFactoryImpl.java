/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.mydsl.guickie.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.guickie.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GuickieFactoryImpl extends EFactoryImpl implements GuickieFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GuickieFactory init()
  {
    try
    {
      GuickieFactory theGuickieFactory = (GuickieFactory)EPackage.Registry.INSTANCE.getEFactory(GuickiePackage.eNS_URI);
      if (theGuickieFactory != null)
      {
        return theGuickieFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GuickieFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GuickieFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GuickiePackage.GUI: return createGUI();
      case GuickiePackage.CONTAINER: return createContainer();
      case GuickiePackage.HORIZONTAL: return createHorizontal();
      case GuickiePackage.VERTICAL: return createVertical();
      case GuickiePackage.STYLE: return createStyle();
      case GuickiePackage.NEON: return createNeon();
      case GuickiePackage.GREY: return createGrey();
      case GuickiePackage.ELEMENT: return createElement();
      case GuickiePackage.BUTTON: return createButton();
      case GuickiePackage.LABEL: return createLabel();
      case GuickiePackage.TEXT_FIELD: return createTextField();
      case GuickiePackage.HYPER_LINK: return createHyperLink();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GUI createGUI()
  {
    GUIImpl gui = new GUIImpl();
    return gui;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.guickie.Container createContainer()
  {
    ContainerImpl container = new ContainerImpl();
    return container;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Horizontal createHorizontal()
  {
    HorizontalImpl horizontal = new HorizontalImpl();
    return horizontal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Vertical createVertical()
  {
    VerticalImpl vertical = new VerticalImpl();
    return vertical;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Style createStyle()
  {
    StyleImpl style = new StyleImpl();
    return style;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Neon createNeon()
  {
    NeonImpl neon = new NeonImpl();
    return neon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Grey createGrey()
  {
    GreyImpl grey = new GreyImpl();
    return grey;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Button createButton()
  {
    ButtonImpl button = new ButtonImpl();
    return button;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Label createLabel()
  {
    LabelImpl label = new LabelImpl();
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TextField createTextField()
  {
    TextFieldImpl textField = new TextFieldImpl();
    return textField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HyperLink createHyperLink()
  {
    HyperLinkImpl hyperLink = new HyperLinkImpl();
    return hyperLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GuickiePackage getGuickiePackage()
  {
    return (GuickiePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GuickiePackage getPackage()
  {
    return GuickiePackage.eINSTANCE;
  }

} //GuickieFactoryImpl
