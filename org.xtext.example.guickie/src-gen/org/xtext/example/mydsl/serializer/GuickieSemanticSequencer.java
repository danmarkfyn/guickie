/*
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mydsl.guickie.Button;
import org.xtext.example.mydsl.guickie.Container;
import org.xtext.example.mydsl.guickie.Element;
import org.xtext.example.mydsl.guickie.GUI;
import org.xtext.example.mydsl.guickie.Grey;
import org.xtext.example.mydsl.guickie.GuickiePackage;
import org.xtext.example.mydsl.guickie.Horizontal;
import org.xtext.example.mydsl.guickie.HyperLink;
import org.xtext.example.mydsl.guickie.Label;
import org.xtext.example.mydsl.guickie.Neon;
import org.xtext.example.mydsl.guickie.Style;
import org.xtext.example.mydsl.guickie.TextField;
import org.xtext.example.mydsl.guickie.Vertical;
import org.xtext.example.mydsl.services.GuickieGrammarAccess;

@SuppressWarnings("all")
public class GuickieSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GuickieGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GuickiePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GuickiePackage.BUTTON:
				sequence_Button(context, (Button) semanticObject); 
				return; 
			case GuickiePackage.CONTAINER:
				sequence_Container(context, (Container) semanticObject); 
				return; 
			case GuickiePackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case GuickiePackage.GUI:
				sequence_GUI(context, (GUI) semanticObject); 
				return; 
			case GuickiePackage.GREY:
				sequence_Grey(context, (Grey) semanticObject); 
				return; 
			case GuickiePackage.HORIZONTAL:
				sequence_Horizontal(context, (Horizontal) semanticObject); 
				return; 
			case GuickiePackage.HYPER_LINK:
				sequence_HyperLink(context, (HyperLink) semanticObject); 
				return; 
			case GuickiePackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case GuickiePackage.NEON:
				sequence_Neon(context, (Neon) semanticObject); 
				return; 
			case GuickiePackage.STYLE:
				sequence_Style(context, (Style) semanticObject); 
				return; 
			case GuickiePackage.TEXT_FIELD:
				sequence_TextField(context, (TextField) semanticObject); 
				return; 
			case GuickiePackage.VERTICAL:
				sequence_Vertical(context, (Vertical) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Button returns Button
	 *
	 * Constraint:
	 *     {Button}
	 */
	protected void sequence_Button(ISerializationContext context, Button semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Container returns Container
	 *
	 * Constraint:
	 *     (name=ID (align=Vertical | align=Horizontal)? elements+=Element+)
	 */
	protected void sequence_Container(ISerializationContext context, Container semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (name=ID (type=Button | type=Label | type=TextField | type=HyperLink) link=[Element|QualifiedName]?)
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GUI returns GUI
	 *
	 * Constraint:
	 *     (title=STRING? style=Style? containers+=Container+)
	 */
	protected void sequence_GUI(ISerializationContext context, GUI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Grey returns Grey
	 *
	 * Constraint:
	 *     {Grey}
	 */
	protected void sequence_Grey(ISerializationContext context, Grey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Horizontal returns Horizontal
	 *
	 * Constraint:
	 *     {Horizontal}
	 */
	protected void sequence_Horizontal(ISerializationContext context, Horizontal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HyperLink returns HyperLink
	 *
	 * Constraint:
	 *     {HyperLink}
	 */
	protected void sequence_HyperLink(ISerializationContext context, HyperLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Label returns Label
	 *
	 * Constraint:
	 *     {Label}
	 */
	protected void sequence_Label(ISerializationContext context, Label semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Neon returns Neon
	 *
	 * Constraint:
	 *     {Neon}
	 */
	protected void sequence_Neon(ISerializationContext context, Neon semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Style returns Style
	 *
	 * Constraint:
	 *     (type=Neon | type=Grey)
	 */
	protected void sequence_Style(ISerializationContext context, Style semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TextField returns TextField
	 *
	 * Constraint:
	 *     {TextField}
	 */
	protected void sequence_TextField(ISerializationContext context, TextField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Vertical returns Vertical
	 *
	 * Constraint:
	 *     {Vertical}
	 */
	protected void sequence_Vertical(ISerializationContext context, Vertical semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
