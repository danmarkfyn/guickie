/*
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GuickieGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GUIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.GUI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGUIAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cTitleKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cTitleKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTitleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cTitleAssignment_1_2.eContents().get(0);
		private final RuleCall cCLOSETerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cStyleKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cStyleKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Keyword cStyleKeyword_2_0_2 = (Keyword)cAlternatives_2_0.eContents().get(2);
		private final Assignment cStyleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStyleStyleParserRuleCall_2_1_0 = (RuleCall)cStyleAssignment_2_1.eContents().get(0);
		private final RuleCall cCLOSETerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cContainersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContainersContainerParserRuleCall_3_0 = (RuleCall)cContainersAssignment_3.eContents().get(0);
		private final RuleCall cCLOSETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		///* (CHEAT SHEET)
		// * https://www.eclipse.org/Xtext/documentation/301_grammarlanguage.html
		// * ? 0 eller 1
		// * Ingenting = 1
		// * * 0 til mange
		// * + 1 til mange
		// * [] ref til en implementation instead of a rule
		// */ GUI:
		//	{GUI} (('Title' | 'title') ':'? title=STRING CLOSE)? (('style:' | 'style' | 'style=') style=Style CLOSE)?
		//	containers+=Container+
		//	CLOSE;
		@Override public ParserRule getRule() { return rule; }
		
		//{GUI} (('Title' | 'title') ':'? title=STRING CLOSE)? (('style:' | 'style' | 'style=') style=Style CLOSE)?
		//containers+=Container+ CLOSE
		public Group getGroup() { return cGroup; }
		
		//{GUI}
		public Action getGUIAction_0() { return cGUIAction_0; }
		
		//(('Title' | 'title') ':'? title=STRING CLOSE)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'Title' | 'title'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'Title'
		public Keyword getTitleKeyword_1_0_0() { return cTitleKeyword_1_0_0; }
		
		//'title'
		public Keyword getTitleKeyword_1_0_1() { return cTitleKeyword_1_0_1; }
		
		//':'?
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//title=STRING
		public Assignment getTitleAssignment_1_2() { return cTitleAssignment_1_2; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_2_0() { return cTitleSTRINGTerminalRuleCall_1_2_0; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_1_3() { return cCLOSETerminalRuleCall_1_3; }
		
		//(('style:' | 'style' | 'style=') style=Style CLOSE)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'style:' | 'style' | 'style='
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//'style:'
		public Keyword getStyleKeyword_2_0_0() { return cStyleKeyword_2_0_0; }
		
		//'style'
		public Keyword getStyleKeyword_2_0_1() { return cStyleKeyword_2_0_1; }
		
		//'style='
		public Keyword getStyleKeyword_2_0_2() { return cStyleKeyword_2_0_2; }
		
		//style=Style
		public Assignment getStyleAssignment_2_1() { return cStyleAssignment_2_1; }
		
		//Style
		public RuleCall getStyleStyleParserRuleCall_2_1_0() { return cStyleStyleParserRuleCall_2_1_0; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_2_2() { return cCLOSETerminalRuleCall_2_2; }
		
		//containers+=Container+
		public Assignment getContainersAssignment_3() { return cContainersAssignment_3; }
		
		//Container
		public RuleCall getContainersContainerParserRuleCall_3_0() { return cContainersContainerParserRuleCall_3_0; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_4() { return cCLOSETerminalRuleCall_4; }
	}
	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContainerAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cContainerKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cContainerKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAlignmentKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cAlignAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final Alternatives cAlignAlternatives_3_2_0 = (Alternatives)cAlignAssignment_3_2.eContents().get(0);
		private final RuleCall cAlignVerticalParserRuleCall_3_2_0_0 = (RuleCall)cAlignAlternatives_3_2_0.eContents().get(0);
		private final RuleCall cAlignHorizontalParserRuleCall_3_2_0_1 = (RuleCall)cAlignAlternatives_3_2_0.eContents().get(1);
		private final RuleCall cSTARTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsElementParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Container:
		//	{Container} ('Container' | 'container') name=ID ('alignment' ':'? align=(Vertical | Horizontal)?) START
		//	elements+=Element+
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Container} ('Container' | 'container') name=ID ('alignment' ':'? align=(Vertical | Horizontal)?) START
		//elements+=Element+ END
		public Group getGroup() { return cGroup; }
		
		//{Container}
		public Action getContainerAction_0() { return cContainerAction_0; }
		
		//'Container' | 'container'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Container'
		public Keyword getContainerKeyword_1_0() { return cContainerKeyword_1_0; }
		
		//'container'
		public Keyword getContainerKeyword_1_1() { return cContainerKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'alignment' ':'? align=(Vertical | Horizontal)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'alignment'
		public Keyword getAlignmentKeyword_3_0() { return cAlignmentKeyword_3_0; }
		
		//':'?
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//align=(Vertical | Horizontal)?
		public Assignment getAlignAssignment_3_2() { return cAlignAssignment_3_2; }
		
		//(Vertical | Horizontal)
		public Alternatives getAlignAlternatives_3_2_0() { return cAlignAlternatives_3_2_0; }
		
		//Vertical
		public RuleCall getAlignVerticalParserRuleCall_3_2_0_0() { return cAlignVerticalParserRuleCall_3_2_0_0; }
		
		//Horizontal
		public RuleCall getAlignHorizontalParserRuleCall_3_2_0_1() { return cAlignHorizontalParserRuleCall_3_2_0_1; }
		
		//START
		public RuleCall getSTARTTerminalRuleCall_4() { return cSTARTTerminalRuleCall_4; }
		
		//elements+=Element+
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_5_0() { return cElementsElementParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class HorizontalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.Horizontal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHorizontalAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHorizontalKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Horizontal:
		//	{Horizontal} ("h" | "horizontal");
		@Override public ParserRule getRule() { return rule; }
		
		//{Horizontal} ("h" | "horizontal")
		public Group getGroup() { return cGroup; }
		
		//{Horizontal}
		public Action getHorizontalAction_0() { return cHorizontalAction_0; }
		
		//"h" | "horizontal"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"h"
		public Keyword getHKeyword_1_0() { return cHKeyword_1_0; }
		
		//"horizontal"
		public Keyword getHorizontalKeyword_1_1() { return cHorizontalKeyword_1_1; }
	}
	public class VerticalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.Vertical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVerticalAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cVKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cVerticalKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Vertical:
		//	{Vertical} ("v" | "vertical");
		@Override public ParserRule getRule() { return rule; }
		
		//{Vertical} ("v" | "vertical")
		public Group getGroup() { return cGroup; }
		
		//{Vertical}
		public Action getVerticalAction_0() { return cVerticalAction_0; }
		
		//"v" | "vertical"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"v"
		public Keyword getVKeyword_1_0() { return cVKeyword_1_0; }
		
		//"vertical"
		public Keyword getVerticalKeyword_1_1() { return cVerticalKeyword_1_1; }
	}
	public class StyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.Style");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeNeonParserRuleCall_0_0 = (RuleCall)cTypeAlternatives_0.eContents().get(0);
		private final RuleCall cTypeGreyParserRuleCall_0_1 = (RuleCall)cTypeAlternatives_0.eContents().get(1);
		
		//Style:
		//	type=(Neon | Grey);
		@Override public ParserRule getRule() { return rule; }
		
		//type=(Neon | Grey)
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//(Neon | Grey)
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//Neon
		public RuleCall getTypeNeonParserRuleCall_0_0() { return cTypeNeonParserRuleCall_0_0; }
		
		//Grey
		public RuleCall getTypeGreyParserRuleCall_0_1() { return cTypeGreyParserRuleCall_0_1; }
	}
	public class NeonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.Neon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNeonAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cNeonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cFunkyKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Neon:
		//	{Neon} ('neon' | 'funky');
		@Override public ParserRule getRule() { return rule; }
		
		//{Neon} ('neon' | 'funky')
		public Group getGroup() { return cGroup; }
		
		//{Neon}
		public Action getNeonAction_0() { return cNeonAction_0; }
		
		//'neon' | 'funky'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'neon'
		public Keyword getNeonKeyword_1_0() { return cNeonKeyword_1_0; }
		
		//'funky'
		public Keyword getFunkyKeyword_1_1() { return cFunkyKeyword_1_1; }
	}
	public class GreyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.Grey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGreyAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cGreyKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cBlandKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Grey:
		//	{Grey} ('grey' | 'bland');
		@Override public ParserRule getRule() { return rule; }
		
		//{Grey} ('grey' | 'bland')
		public Group getGroup() { return cGroup; }
		
		//{Grey}
		public Action getGreyAction_0() { return cGreyAction_0; }
		
		//'grey' | 'bland'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grey'
		public Keyword getGreyKeyword_1_0() { return cGreyKeyword_1_0; }
		
		//'bland'
		public Keyword getBlandKeyword_1_1() { return cBlandKeyword_1_1; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cOfTypeKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cTypeKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Alternatives cAlternatives_4_1_1 = (Alternatives)cGroup_4_1.eContents().get(1);
		private final Keyword cColonKeyword_4_1_1_0 = (Keyword)cAlternatives_4_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1_1_1 = (Keyword)cAlternatives_4_1_1.eContents().get(1);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cTypeAlternatives_5_0 = (Alternatives)cTypeAssignment_5.eContents().get(0);
		private final RuleCall cTypeButtonParserRuleCall_5_0_0 = (RuleCall)cTypeAlternatives_5_0.eContents().get(0);
		private final RuleCall cTypeLabelParserRuleCall_5_0_1 = (RuleCall)cTypeAlternatives_5_0.eContents().get(1);
		private final RuleCall cTypeTextFieldParserRuleCall_5_0_2 = (RuleCall)cTypeAlternatives_5_0.eContents().get(2);
		private final RuleCall cTypeHyperLinkParserRuleCall_5_0_3 = (RuleCall)cTypeAlternatives_5_0.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_6_0 = (Alternatives)cGroup_6.eContents().get(0);
		private final Keyword cLinkToKeyword_6_0_0 = (Keyword)cAlternatives_6_0.eContents().get(0);
		private final Keyword cLinkKeyword_6_0_1 = (Keyword)cAlternatives_6_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6_0_2 = (Keyword)cAlternatives_6_0.eContents().get(2);
		private final Assignment cLinkAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cLinkElementCrossReference_6_1_0 = (CrossReference)cLinkAssignment_6_1.eContents().get(0);
		private final RuleCall cLinkElementQualifiedNameParserRuleCall_6_1_0_1 = (RuleCall)cLinkElementCrossReference_6_1_0.eContents().get(1);
		
		//Element:
		//	{Element}
		//	'element' (':' | "=")? name=ID ('of type' | 'type' (':' | "=")?) type=(Button | Label | TextField | HyperLink)
		//	(('link to' | 'link' | '->') link=[Element|QualifiedName])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Element} 'element' (':' | "=")? name=ID ('of type' | 'type' (':' | "=")?) type=(Button | Label | TextField | HyperLink)
		//(('link to' | 'link' | '->') link=[Element|QualifiedName])?
		public Group getGroup() { return cGroup; }
		
		//{Element}
		public Action getElementAction_0() { return cElementAction_0; }
		
		//'element'
		public Keyword getElementKeyword_1() { return cElementKeyword_1; }
		
		//(':' | "=")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'of type' | 'type' (':' | "=")?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'of type'
		public Keyword getOfTypeKeyword_4_0() { return cOfTypeKeyword_4_0; }
		
		//'type' (':' | "=")?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'type'
		public Keyword getTypeKeyword_4_1_0() { return cTypeKeyword_4_1_0; }
		
		//(':' | "=")?
		public Alternatives getAlternatives_4_1_1() { return cAlternatives_4_1_1; }
		
		//':'
		public Keyword getColonKeyword_4_1_1_0() { return cColonKeyword_4_1_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_4_1_1_1() { return cEqualsSignKeyword_4_1_1_1; }
		
		//type=(Button | Label | TextField | HyperLink)
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//(Button | Label | TextField | HyperLink)
		public Alternatives getTypeAlternatives_5_0() { return cTypeAlternatives_5_0; }
		
		//Button
		public RuleCall getTypeButtonParserRuleCall_5_0_0() { return cTypeButtonParserRuleCall_5_0_0; }
		
		//Label
		public RuleCall getTypeLabelParserRuleCall_5_0_1() { return cTypeLabelParserRuleCall_5_0_1; }
		
		//TextField
		public RuleCall getTypeTextFieldParserRuleCall_5_0_2() { return cTypeTextFieldParserRuleCall_5_0_2; }
		
		//HyperLink
		public RuleCall getTypeHyperLinkParserRuleCall_5_0_3() { return cTypeHyperLinkParserRuleCall_5_0_3; }
		
		//(('link to' | 'link' | '->') link=[Element|QualifiedName])?
		public Group getGroup_6() { return cGroup_6; }
		
		//'link to' | 'link' | '->'
		public Alternatives getAlternatives_6_0() { return cAlternatives_6_0; }
		
		//'link to'
		public Keyword getLinkToKeyword_6_0_0() { return cLinkToKeyword_6_0_0; }
		
		//'link'
		public Keyword getLinkKeyword_6_0_1() { return cLinkKeyword_6_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_6_0_2() { return cHyphenMinusGreaterThanSignKeyword_6_0_2; }
		
		//link=[Element|QualifiedName]
		public Assignment getLinkAssignment_6_1() { return cLinkAssignment_6_1; }
		
		//[Element|QualifiedName]
		public CrossReference getLinkElementCrossReference_6_1_0() { return cLinkElementCrossReference_6_1_0; }
		
		//QualifiedName
		public RuleCall getLinkElementQualifiedNameParserRuleCall_6_1_0_1() { return cLinkElementQualifiedNameParserRuleCall_6_1_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cButtonAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cBtnKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cButtonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Button:
		//	{Button} ('btn' | 'button');
		@Override public ParserRule getRule() { return rule; }
		
		//{Button} ('btn' | 'button')
		public Group getGroup() { return cGroup; }
		
		//{Button}
		public Action getButtonAction_0() { return cButtonAction_0; }
		
		//'btn' | 'button'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'btn'
		public Keyword getBtnKeyword_1_0() { return cBtnKeyword_1_0; }
		
		//'button'
		public Keyword getButtonKeyword_1_1() { return cButtonKeyword_1_1; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLabelAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLblKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cLabelKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Label:
		//	{Label} ('lbl' | 'label');
		@Override public ParserRule getRule() { return rule; }
		
		//{Label} ('lbl' | 'label')
		public Group getGroup() { return cGroup; }
		
		//{Label}
		public Action getLabelAction_0() { return cLabelAction_0; }
		
		//'lbl' | 'label'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'lbl'
		public Keyword getLblKeyword_1_0() { return cLblKeyword_1_0; }
		
		//'label'
		public Keyword getLabelKeyword_1_1() { return cLabelKeyword_1_1; }
	}
	public class TextFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.TextField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cTfKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cTextfieldKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//TextField:
		//	{TextField} ('tf' | 'textfield');
		@Override public ParserRule getRule() { return rule; }
		
		//{TextField} ('tf' | 'textfield')
		public Group getGroup() { return cGroup; }
		
		//{TextField}
		public Action getTextFieldAction_0() { return cTextFieldAction_0; }
		
		//'tf' | 'textfield'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'tf'
		public Keyword getTfKeyword_1_0() { return cTfKeyword_1_0; }
		
		//'textfield'
		public Keyword getTextfieldKeyword_1_1() { return cTextfieldKeyword_1_1; }
	}
	public class HyperLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.HyperLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHyperLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHyperlinkKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cWebpageKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//HyperLink:
		//	{HyperLink} ('hyperlink' | 'webpage');
		@Override public ParserRule getRule() { return rule; }
		
		//{HyperLink} ('hyperlink' | 'webpage')
		public Group getGroup() { return cGroup; }
		
		//{HyperLink}
		public Action getHyperLinkAction_0() { return cHyperLinkAction_0; }
		
		//'hyperlink' | 'webpage'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'hyperlink'
		public Keyword getHyperlinkKeyword_1_0() { return cHyperlinkKeyword_1_0; }
		
		//'webpage'
		public Keyword getWebpageKeyword_1_1() { return cWebpageKeyword_1_1; }
	}
	
	
	private final GUIElements pGUI;
	private final ContainerElements pContainer;
	private final HorizontalElements pHorizontal;
	private final VerticalElements pVertical;
	private final StyleElements pStyle;
	private final NeonElements pNeon;
	private final GreyElements pGrey;
	private final ElementElements pElement;
	private final QualifiedNameElements pQualifiedName;
	private final ButtonElements pButton;
	private final LabelElements pLabel;
	private final TextFieldElements pTextField;
	private final HyperLinkElements pHyperLink;
	private final TerminalRule tCLOSE;
	private final TerminalRule tSTART;
	private final TerminalRule tEND;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GuickieGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGUI = new GUIElements();
		this.pContainer = new ContainerElements();
		this.pHorizontal = new HorizontalElements();
		this.pVertical = new VerticalElements();
		this.pStyle = new StyleElements();
		this.pNeon = new NeonElements();
		this.pGrey = new GreyElements();
		this.pElement = new ElementElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pButton = new ButtonElements();
		this.pLabel = new LabelElements();
		this.pTextField = new TextFieldElements();
		this.pHyperLink = new HyperLinkElements();
		this.tCLOSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.CLOSE");
		this.tSTART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.START");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Guickie.END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Guickie".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///* (CHEAT SHEET)
	// * https://www.eclipse.org/Xtext/documentation/301_grammarlanguage.html
	// * ? 0 eller 1
	// * Ingenting = 1
	// * * 0 til mange
	// * + 1 til mange
	// * [] ref til en implementation instead of a rule
	// */ GUI:
	//	{GUI} (('Title' | 'title') ':'? title=STRING CLOSE)? (('style:' | 'style' | 'style=') style=Style CLOSE)?
	//	containers+=Container+
	//	CLOSE;
	public GUIElements getGUIAccess() {
		return pGUI;
	}
	
	public ParserRule getGUIRule() {
		return getGUIAccess().getRule();
	}
	
	//Container:
	//	{Container} ('Container' | 'container') name=ID ('alignment' ':'? align=(Vertical | Horizontal)?) START
	//	elements+=Element+
	//	END;
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}
	
	//Horizontal:
	//	{Horizontal} ("h" | "horizontal");
	public HorizontalElements getHorizontalAccess() {
		return pHorizontal;
	}
	
	public ParserRule getHorizontalRule() {
		return getHorizontalAccess().getRule();
	}
	
	//Vertical:
	//	{Vertical} ("v" | "vertical");
	public VerticalElements getVerticalAccess() {
		return pVertical;
	}
	
	public ParserRule getVerticalRule() {
		return getVerticalAccess().getRule();
	}
	
	//Style:
	//	type=(Neon | Grey);
	public StyleElements getStyleAccess() {
		return pStyle;
	}
	
	public ParserRule getStyleRule() {
		return getStyleAccess().getRule();
	}
	
	//Neon:
	//	{Neon} ('neon' | 'funky');
	public NeonElements getNeonAccess() {
		return pNeon;
	}
	
	public ParserRule getNeonRule() {
		return getNeonAccess().getRule();
	}
	
	//Grey:
	//	{Grey} ('grey' | 'bland');
	public GreyElements getGreyAccess() {
		return pGrey;
	}
	
	public ParserRule getGreyRule() {
		return getGreyAccess().getRule();
	}
	
	//Element:
	//	{Element}
	//	'element' (':' | "=")? name=ID ('of type' | 'type' (':' | "=")?) type=(Button | Label | TextField | HyperLink)
	//	(('link to' | 'link' | '->') link=[Element|QualifiedName])?;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Button:
	//	{Button} ('btn' | 'button');
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//Label:
	//	{Label} ('lbl' | 'label');
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//TextField:
	//	{TextField} ('tf' | 'textfield');
	public TextFieldElements getTextFieldAccess() {
		return pTextField;
	}
	
	public ParserRule getTextFieldRule() {
		return getTextFieldAccess().getRule();
	}
	
	//HyperLink:
	//	{HyperLink} ('hyperlink' | 'webpage');
	public HyperLinkElements getHyperLinkAccess() {
		return pHyperLink;
	}
	
	public ParserRule getHyperLinkRule() {
		return getHyperLinkAccess().getRule();
	}
	
	//terminal CLOSE:
	//	'\n'+ | ';';
	public TerminalRule getCLOSERule() {
		return tCLOSE;
	}
	
	//terminal START:
	//	'(';
	public TerminalRule getSTARTRule() {
		return tSTART;
	}
	
	//terminal END:
	//	')';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
